1> Khái niệm
Delegate là một cơ chế trong c#, cho phép gọi thực hiện các hàm và các sự kiện, Delegate cho phép chúng ta làm việc với các hàm như các đối tượng.
Trong C#, delegate được xem như một con trỏ trỏ tới các phương thức
Ví dụ: 
public delegate void PrintMessage(string message);     
class Program

{
    public static void HelloWorld(string message)
    {
        Console.WriteLine(message);
    }
    static void Main(string[] args)
    {

        PrintMessage printMessageDel = new PrintMessage(HelloWorld);
        printMessageDel("Hello World!!!");

    }                    
}
2. Kết hợp các phương thức trong cùng một delegate
 public delegate void PrintMessage(string message);
 class Program

 {
     public static void printToConsole(string message)
     {
         Console.WriteLine(message);
     }
     public static void printToFile(string file)
     {
         Console.WriteLine("Print to File: " + file);
     }
     static void Main(string[] args)
     {

         PrintMessage printMessageDel = new PrintMessage(printToConsole);
         printMessageDel += printToFile;
         printMessageDel("Hello World!!!");

     }                    
 }
3. Sử dụng delegate với các phương thức và trả giá trị về từ phương thức
 public delegate int Calculate(int x, int y);
 class Program

 {
     public static int add(int a, int b)
     {
         return a + b;
     }
     public static int sub(int a, int b)
     {
         return a - b;
     }
     static void Main(string[] args)
     {
         int a = 10, b = 20;
         Calculate calc = new Calculate(add);
         int tong = calc(a, b);
         Console.WriteLine("{0} + {1} ={2} ",a,b, tong);
         calc = new Calculate(sub);
         int hieu = calc(a, b);
         Console.WriteLine("{0} - {1} ={2} ", a, b, tong);
     }                    
 }
4. The TV Remote:
G/s có một cái TV và một cái điều khiển, trên điều khiển có một nút tăng/giảm âm lượng. Cái điều khiển ko quan tâm TV đang ở đâu, và nó vẫn có thể điều khiển âm lượng của TV qua nút Volume.
public delegate void RemoteAction();
class Program

{
    public static void IncreaseVolume()
    {
        Console.WriteLine("Volume is increased!!!!");
    } 
    static void Main(string[] args)
    {
        RemoteAction remoteButton = new RemoteAction(IncreaseVolume);
        //remoteButton();
        remoteButton.Invoke();
    }                    
}
5. Xử lý với Even 
Chương trình tích hợp delegate và Event
+ Tạo một delegate NotifyEventHandler
+ Tạo một lớp Publisher với sự kiện Notify (sự kiện này được khai báo thông qua delegate)
+ Xây dựng hàm RaiseEvent(), hàm này kiểm tra xem con trỏ Notify có khác null không, nếu đúng sẽ hiển thị thông báo và kích hoạt sự kiện Notify.Invoke()
+ Xây dựng lớp Subscriber, với hàm Notification()
Hàm main khởi tạo hai đối tượng publisher và subscriber. Gán event Notify của publisher vào hàm Notification của subscriber và goi phương thức RaiseEvent()
 public delegate void NotifyEventHandler();
 
 public class Publisher
 {
     public event NotifyEventHandler Notify;
     public void RaiseEvent()
     {
         if (Notify != null)
         {
             Console.WriteLine("Publisher Raise Event!!!!");
             Notify.Invoke();
         }
     }
 }
 public class Subscriber
 {
     public void Notification()
     {
         Console.WriteLine("Subscriber is received notification");
     }
 }
 class Program

 {        
     static void Main(string[] args)
     {
         Publisher publisher = new Publisher();
         Subscriber subscriber = new Subscriber();

         publisher.Notify += subscriber.Notification;
         publisher.RaiseEvent();

     }                    
 }
