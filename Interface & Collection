1. Interface: 
interface tương tự như lớp trừu tượng, trong interface chỉ chứa các thuộc tính và khai báo phương thức. Không chứa nội dung của phương thức
interface IVehicle
{
    void speedUp(int speed);
}

class Bicycle:IVehicle
{
    int speed;
    public Bicycle(int s)
    {
        speed = s;
    }
    public void speedUp(int a)
    {
        speed += a;
    }
    public void checkSpeed()
    {
        Console.WriteLine("Current speed is: " + speed);
    }
}
class Bike : IVehicle
{
    int speed;
    public Bike(int s)
    {
        speed = s;
    }
    public void speedUp(int a)
    {
        speed += a;
    }
    public void checkSpeed()
    {
        Console.WriteLine("Current speed is: " + speed);
    }
}
class Program
{
    static void Main()
    {
        Bicycle bi = new Bicycle(10);
        Bike bk = new Bike(60);
        bi.checkSpeed();
        bk.checkSpeed();
        Console.WriteLine("Speed up the Bicycle up to 5");
        bi.speedUp(5);
        bi.checkSpeed();
        Console.WriteLine("Speed up the bike up to 2");
        bk.speedUp(2);
        bk.checkSpeed();
    }
    
}

/////////////////////////////////////////////////
BÀI TẬP ÁP DỤNG INTEFACE VÀ COLLECTION
Chương trình quản lý cửa hàng kem
1. Tạo một lớp abstract Ingredient: chứa các thông tin về thành phần: name, cost, Allergens (chất gây dị ứng = List: một danh sách)
2. Tạo lớp Cone kế thừa từ lớp Ingredient
3. Tạo lớp Flavor kế thừa từ lớp Ingredient
4. Tạo lớp Case: chứa danh sách Flavor, Cone
5. Xây dựng lớp FlavorComparer kế thừa từ interface IComparer<>
using System;

using System.Collections.Generic;

namespace IceCreamShop
{
    public abstract class Ingredient{
        public string Name { get; set; }
        public double Cost { get; set; }
        public List<string> Allergens { get; set; }
        public Ingredient(string name, double cost, List<string> allergens)
        {
            Name = name;
            Cost = cost;
            Allergens = allergens;
        }
        public override string ToString()
        {
            string s = "";
            for (int i = 0; i < Allergens.Count; i++) s += Allergens[i].ToString() + ", ";
            return "Name: " + Name + "\n" + "Cost: $" + Cost + "\n" + "Allergens: " + s + "\n";
        }
    }

    public class Cone : Ingredient
    {
        public Cone(string name, double cost, List<string> allergens):base(name, cost, allergens) { }
    }
    public class Flavor : Ingredient
    {
        public Flavor(string name, double cost, List<string> allergens):base (name, cost, allergens) { }
    }
    public class Case
    {
        public List<Flavor> Flavors { get; set; }
        public List<Cone> Cones { get; set; }
        public Case()
        {
            Cones = new List<Cone>();
            Cone cone1 = new Cone("Waffle", 1.25, new List<string> { "gluten" });
            Cone cone2 = new Cone("Sugar", 0.75, new List<string> { "gluten" });
            Cone cone3 = new Cone("Wafer", 0.50, new List<string> { "gluten" });
            Cone cone4 = new Cone("Bowl", 0.05, new List<string> { "none" });
            Cones.Add(cone1);
            Cones.Add(cone2);
            Cones.Add(cone3);
            Cones.Add(cone4);
            Flavors = new List<Flavor>();
            Flavor flavor1 = new Flavor("Vanilla", 0.75, new List<string> { "dairy" });
            Flavor flavor2 = new Flavor("Chocolate", 0.75, new List<string> { "dairy" });
            Flavor flavor3 = new Flavor("Red Velvet", 0.85, new List<string> { "dairy", "red #5" });
            Flavor flavor4 = new Flavor("Rocky Road", 0.85, new List<string> { "dairy", "nuts", "gelatin" });
            Flavor flavor5 = new Flavor("Strawberry Sorbet", 0.50, new List<string> { "strawberry" });
            Flavors.Add(flavor1);
            Flavors.Add(flavor2);
            Flavors.Add(flavor3);
            Flavors.Add(flavor4);
            Flavors.Add(flavor5);
        }


    }

    public class FlavorComparer: IComparer<Flavor>
    {
        public int Compare(Flavor x, Flavor y)
        {
            if (x.Cost == y.Cost) return 0;
            else if (x.Cost < y.Cost) return -1;
            else return 1;
        }
    }

    class Program

    {
        static void Main(string[] args)

        {
            Case menu = new Case();
            List<Flavor> availableFlavors = menu.Flavors;
            List<Cone> availableCones = menu.Cones;
            Console.WriteLine("=========Danh sach Flavor==============");
            for(int i=0; i<availableFlavors.Count; i++)
            {
                Console.WriteLine(availableFlavors[i].ToString());
            }
            availableFlavors.Sort(new FlavorComparer());
            Console.WriteLine("=========Danh sach Flavor da sap xep============");
            for (int i = 0; i < availableFlavors.Count; i++)
            {
                Console.WriteLine(availableFlavors[i].ToString());
            }

        }

    }
}
