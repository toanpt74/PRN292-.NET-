1. Exception: Là cơ chế xử lý lỗi trong chương trình
Cú pháp:
try {
   // statements causing exception
} catch( ExceptionName e1 ) {
   // error handling code
} catch( ExceptionName e2 ) {
   // error handling code
} catch( ExceptionName eN ) {
   // error handling code
} finally {
   // statements to be executed
}Khối lệnh
}
catch(exception){
  Khối lệnh xử lý lỗi
}
Ví dụ: 
try
      {
        int[] myNumbers = {1, 2, 3};
        Console.WriteLine(myNumbers[10]);
      }
      catch (Exception e)
      {
        Console.WriteLine(e.Message);
      }   
Chương trình khai báo mảng có 3 phần tử, lệnh truy xuất myNumbers[10] bị lỗi vì vượt quá phạm vi của mảng => Khối lệnh trong catch được thực hiện và xuất hiện thông báo lỗi
2. Một số lớp exception trong C#
System.IO.IOException
System.IndexOutOfRangeException
System.ArrayTypeMismatchException
System.NullReferenceException
System.DivideByZeroException
System.InvalidCastException
System.OutOfMemoryException
System.StackOverflowException

2. Ví dụ:
using System;

namespace DivisionZeroExample
{
  class DivNumbers{
  	float result;
    public DivNumbers(){
    	result=0;
    }
    public void division(int a, int b){
    	try{
        	result = a/b;
        }catch(DivideByZeroException e){
        	Console.WriteLine("Thông báo lỗi: {0}", e);
        }finally{
        	Console.WriteLine("Kết quả: {0}", result);
        }
        
    }
  }
  
  class Program
  {
    static void Main(string[] args)
    {
    	DivNumbers div = new DivNumbers();
        div.division(25,0);
    }
  }
}
3.  Custom Exception
+ Tạo một lớp kế thừa từ lớp Exception
using System;

namespace TempratureExample
{

  public class TempIsZeroException: Exception {
     public TempIsZeroException(string message): base(message) {
     }
  }
  
  public class Temperature {
   int temperature = 0; 
   public void showTemp() 
   {      
      if(temperature == 0) {
         throw (new TempIsZeroException("Zero Temperature found"));
      } else {
         Console.WriteLine("Temperature: {0}", temperature);
      }
   	}
 }
	
  
  	
  class Program
  {
    static void Main(string[] args)
    {
    	Temperature t = new Temperature();
    	try{
        	t.showTemp();
        }
        catch(TempIsZeroException e){
        	Console.WriteLine("TempIsZeroException: {0}", e.Message);
        }
          
  	}
}
}

II> BÀI THỰC HÀNH
1. Write a C# program that prompts the user to input two numbers and divides them. Handle an exception when the user enters non-numeric values.
2. Write a C# program to implement a method that takes an integer as input and throws an exception if the number is negative. Handle the exception in the calling code.
3. Write a C# program that reads a file path from the user and tries to open the file. Handle exceptions if the file does not exist.
4. Write a C# program that prompts the user to input a numeric integer and throws an exception if the number is less than 0 or greater than 1000.
5. Write a C# program that implements a method that takes an array of integers as input and calculates the average value. Handle the exception if the array is empty.
6. Write a C# program that reads a string from the user and converts it to an integer. Handle the exception if the input cannot be parsed into an integer.
7. Write a C# program that reads a list of integers from the user. Handle the exception that occurs if the user enters a value outside the range of Int32.
8. Write a C# program that implements a method that divides two numbers. Handle the DivideByZeroException that occurs if the denominator is 0.
9. Write a C# program that creates a method that reads a date from the user in the format "dd/mm/yyyy" and converts it to a DateTime object. Handle an exception if the input format is invalid.
10. Write a C# program that reads a number from the user and calculates its square root. Handle the exception if the number is negative.
11. Write a C# program that creates a method that takes a string as input and converts it to uppercase. Handle the NullReferenceException that occurs if the input string is null.
12. Write a C# program that creates a method that calculates the factorial of a given number. Handle the OverflowException that occurs if the result exceeds the Int32 maximum value.
