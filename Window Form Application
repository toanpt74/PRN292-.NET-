/*
Xây dựng chương trình dạng window form quản lý thông tin danh bạ
Sử dụng cấu trúc json để lưu trữ các thông tin 
Chương trình cho phép thêm, sửa, xóa các thông tin trong danh bạ
1. Khi vào hệ thống sẽ xuất hiện form đăng nhập
2. Chương trình sử dụng tệp user.json để quản lý thông tin về người sử dụng
3. File contact.json để quản lý thông tin danh bạ
4. Chương trình có hai chức năng chính là
	+ Quản lý người dùng
	+ Quản lý thông tin danh bạ
5. Thông tin danh bạ gồm: họ và tên, số điện thoại, địa chỉ liên lạc, giới tính, năm sinh	
*/

1. Tạo form login
1.1. Tạo form
1.1. Sử dụng label và textbox để thiết kế giao diện
1.3. Đặt thuộc tính StartPossition là CenterScreen
1.4 Thêm các code cho chương trình
 private void tblCancel_Click(object sender, EventArgs e)
 {
     Application.Exit();
 }
 
 1.4. Thêm một lớp user như sau:
  public class user
 {
     private string username;
     private string password;

     public string Username { get => username; set => username = value; }
     public string Password { get => password; set => password = value; }
     public user(string username, string password)
     {
        this.Username = username;
        this.Password = password;            
     }
 }
 1.5. Viết lệnh cho sự kiện của nút đăng nhập
  private void btnLogin_Click(object sender, EventArgs e)
 {
     string filePath = "users.json";            
     List<user> users = new List<user>();
     string userName = txtUserName.Text;
     string passWord = txtPassWord.Text;
     if(userName.Trim()=="" || passWord.Trim() == "")
     {
         MessageBox.Show("Chưa nhập đầy đủ thông tin đăng nhập.");
         txtUserName.Focus();
         return;
     }                        
     if (!File.Exists(filePath))
     {
         MessageBox.Show("Không tồn tại tệp tin user.json");
         return;
     }

     string jsonString = File.ReadAllText(filePath);
     jsonString ="[" + jsonString + "]";
     users = JsonConvert.DeserializeObject<List<user>>(jsonString);
     for (int i = 0; i < users.Count; i++)
     {
         if (users[i].UserName == userName)
         {
             if (users[i].PassWord == passWord)
             {
                 MessageBox.Show("Đăng nhập thành công.");
             }
             else
             {
                 MessageBox.Show("Mật khẩu chưa chính xác");
                 txtPassWord.Text = "";
                 txtPassWord.Focus();
                 return;
             }
         }
         else
         {
             MessageBox.Show("Tên đăng nhập chưa chính xác.");
             txtUserName.Text = "";
             txtUserName.Focus();
             return;
         }

     }
 }
 
 1.6. Hãy thêm chức năng khi đăng nhập sai quá 3 lần thì hệ thống sẽ tự khóa form
 
 2. Xây dựng form thêm người sử dụng
 + Yêu cầu form cho phép nhập các thông tin người dùng
 + Thêm mới người sử dụng vào tệp user.json
 + Kiểm tra xem người sử dụng đã tồn tại chưa.
 Thêm hai hàm sau vào lớp user
 public List<user> getUsers()
{
    string filePath = "users.json";
    List<user> users = new List<user>();
    if (File.Exists(filePath))
    {
        string jsonString = File.ReadAllText(filePath);
        jsonString = "[" + jsonString + "]";
        users = JsonConvert.DeserializeObject<List<user>>(jsonString);  
    }
    return users;
}

public bool checkUserExist(string uname)
{
    bool check = false;
    List<user> users = getUsers();
    if (users.Count <= 0) {
        return true;
    }
    for(int i=0; i<users.Count; i++)
    {
        if (users[i].UserName.Trim() == uname.Trim())
        {
            check = true;
            break;
        }
    }
    return check;
}
+ Viết code cho sự kiện click của button btnAdd_Click
private void btnAdd_Click(object sender, EventArgs e)
{
    string filePath = "users.json";
    string userName = txtUserName.Text.Trim();
    string passWord = txtPassWord.Text.Trim();
    if (userName == "")
    {
        MessageBox.Show("Tên đăng nhập không được để trống.");
        txtUserName.Focus();
        return;
    }
    if (passWord == "")
    {
        MessageBox.Show("Mật khẩu nhập không được để trống.");
        txtPassWord.Focus();
        return;
    }

    user u1 = new user();
    bool check = u1.checkUserExist(userName);
    if (check)
    {
        MessageBox.Show("Tên đăng nhập " + userName +" đã có trong hệ thống. Hãy nhập một tên đăng nhập khác.");
        txtUserName.Text = "";
        txtUserName.Focus();
        return;

    }
    List<user> users = new List<user>();
    users = u1.getUsers();
    user u2 = new user(userName, passWord);
    users.Add(u2);
    string jsonString = JsonConvert.SerializeObject(users);
    jsonString = jsonString.Substring(1, jsonString.Length - 2);
    
    File.WriteAllText(filePath, jsonString);
    MessageBox.Show("Người dùng " + userName +" đã được thêm vào hệ thống.");
}

3. Xây dựng form hiển thị thông tin
3.1. Tạo form
3.2. Viết thủ tục get data

 private void getData()
 {
     List<user> users = new List<user>();
     user u1 = new user();
     users = u1.getUsers();
     if(users.Count <= 0)
     {
         MessageBox.Show("Không có người dùng nào trong hệ thống.");
         return;
     }
     DataTable dt = new DataTable();
     dt.Columns.Add("UserName", typeof(string));
     dt.Columns.Add("PassWord", typeof(string));

    


     for (int i=0; i<users.Count; i++)
     {
         DataRow dr = dt.NewRow();
         dr["UserName"] = users[i].UserName;
         dr["PassWord"] = users[i].PassWord;
         dt.Rows.Add(dr);
     }                                  
     gvwUsers.DataSource = dt;
     gvwUsers.Columns[0].HeaderText = "Tên đăng nhập";
     gvwUsers.Columns[0].Width = 200;
     gvwUsers.Columns[1].HeaderText = "Mật khẩu";
     gvwUsers.Columns[1].Width = 200;
 }
 
 ///////////////////
 4. Tạo form hiển thị thông tin về contact
 4.1 Thiết kế form sử dụng data gridview
 4.2. Xây dựng thêm lớp contact như sau:
 
  public class contact
 {
     private string name;
     private string phone;
     private string address;
     private int gender;
     private DateTime birthdate;

     public string Name { get; set; }
     public string Phone { get; set; }
     public string Address { get; set; }
     public int Gender { get; set; }
     public DateTime BirthDate { get; set; }
     public contact() { }
     public contact(string name, string phone, string address, int gender, DateTime birthdate)
     {
         this.Name = name;
         this.Phone = phone;
         this.Address = address;
         this.Gender = gender;
         this.BirthDate = birthdate;            
     }
     public List<contact> getContacts()
     {
         string filePath = "contact.json";
         List<contact> contacts = new List<contact>();
         if (!File.Exists(filePath))
         {
             MessageBox.Show("Không có file " + filePath);
             return null;
         }

         string jsonString = File.ReadAllText(filePath);
         jsonString = "[" + jsonString + "]";
         contacts = JsonConvert.DeserializeObject<List<contact>>(jsonString);
         return contacts;
     }
 }
 4.3. Viết thủ tục getdata như sau:
  private void LoadData()
 {
     contact c1 = new contact();
     List<contact> contacts = c1.getContacts();
     gvwContact.DataSource = contacts;
     setupGrid(gvwContact);
 }
 private void setupGrid(DataGridView gvw)
 {
     gvw.Columns[0].Width = 120;
     gvw.Columns[1].Width = 80;
     gvw.Columns[2].Width = 300;
     gvw.Columns[3].Width = 100;
     gvw.Columns[4].Width = 100;
 }
 
  private void frmContact_Load(object sender, EventArgs e)
 {
     LoadData();
 }
 
 4.4. Tạo thêm hai nút Next và Prev, thêm code cho hai nút này
 + Thêm label đặt tên là lblStatus
 + Tạo biến tổng thể
  static int rowIndex = 0;
  static List<contact> contacts  ;
Code cho sự kiện click của các nút bấm
 private void btnNext_Click(object sender, EventArgs e)
 {
     int n = gvwContact.Rows.Count;
     if (rowIndex >=0 && rowIndex < n)
     {
         rowIndex = ++rowIndex % n;
         gvwContact.Rows[rowIndex].Selected = true;
     }
     else rowIndex = 0;
     lblStatus.Text = "Current record: " + rowIndex + " Name: " + contacts[rowIndex].Name ;
 }

 private void btnPrev_Click(object sender, EventArgs e)
 {
     int n = gvwContact.Rows.Count;
     if (rowIndex > 0 && rowIndex < n)
     {
         rowIndex = --rowIndex % n;
         gvwContact.Rows[rowIndex].Selected = true;
     }
     else
     {
         rowIndex = n - 1;
         gvwContact.Rows[rowIndex].Selected = true;
     }
     lblStatus.Text = "Current record: " + rowIndex + " Name: " + contacts[rowIndex].Name;

 } 
 
  private void tbnFirst_Click(object sender, EventArgs e)
 {
     rowIndex = 0;
     gvwContact.Rows[rowIndex].Selected = true;
     lblStatus.Text = "Current record: " + rowIndex + " Name: " + contacts[rowIndex].Name;
 }

 private void tbnLast_Click(object sender, EventArgs e)
 {
     rowIndex=gvwContact.Rows.Count-1;
     gvwContact.Rows[rowIndex].Selected = true;
     lblStatus.Text = "Current record: " + rowIndex + " Name: " + contacts[rowIndex].Name;

 }
 5. Thực hiện thao tác thêm dữ liệu contact
 5.1. Tạo form addContact
 5.2. Thiết kế giao diện
 5.3. Thêm delegate và event vào lớp này: 
  public delegate void DataUpdatedHandler(string data);
 public event DataUpdatedHandler DataUpdated;
 Hai cái này được sử dụng để truyền thông tin giữa hai form
 5.4. Viết lệnh cho sự kiện save data
 
  private void tbnSave_Click(object sender, EventArgs e)
 {
     string filePath = "contact.json";
     string name = txtName.Text.Trim();
     string phone = txtPhone.Text.Trim();
     string address = txtAddress.Text.Trim();
     int gender = 0;
     if (rdoNam.Checked) gender = 1;
     else if (rdoNu.Checked) gender = 0;
     DateTime dateTime = dateBithDate.Value;

     string strBirthDate = dateTime.ToString("MM/dd/yyyy");
     string message = "";
      

     string msg = "";
     if (name == "") msg += "Họ tên không được để trống." + System.Environment.NewLine;
     if (phone == "") msg += "Số điện thoại không được để trống." + System.Environment.NewLine;
     if(address=="")msg+= "Địa chỉ không được để trống" + System.Environment.NewLine;

     if (msg != "")
     {
         MessageBox.Show(msg);
         txtName.Focus();
         if (DataUpdated != null) DataUpdated.Invoke("Lỗi cập nhật dữ liệu");
         return;
     }
     else
     {
         contact c1 = new contact(name,phone, address,gender, strBirthDate);
         string jsonString = JsonConvert.SerializeObject(c1);
         message = jsonString;
         if (!File.Exists(filePath))
         {
             message = "Không có file " + filePath;
             if (DataUpdated != null) DataUpdated.Invoke(message);
             return;
         }

         string str = File.ReadAllText(filePath);
         if(str.Length > 0)
         {
             
             jsonString = "," + jsonString;
         }
         //Cập nhật dữ liệu vào file
          File.AppendAllText(filePath, jsonString);
          if (DataUpdated != null) DataUpdated.Invoke(message);
     }
     this.Close();
 }
 5.5. Quay lại form frmContact để đăng kí sự kiện
  private void btnAdd_Click(object sender, EventArgs e)
 {
     frmAddContact frmAddContact = new frmAddContact();
     frmAddContact.MdiParent = frmMain.ActiveForm;
     frmAddContact.StartPosition = FormStartPosition.Manual;
     frmAddContact.DataUpdated += (data)=> {
         string jsonString = data;
         contact c1 = JsonConvert.DeserializeObject<contact>(jsonString);
         contacts.Add(c1);
         gvwContact.DataSource = null;
         gvwContact.DataSource = contacts;
         lblStatus.Text = "Cập nhật dữ liệu thành công."; 
     };

     frmAddContact.Show();
 }
 
 6. Thao tác sửa dữ liệu
 6.1 Thiết kế form (trùng với form addContact)
 6.2. Thêm sự kiện click chuột cho nút edit trong form contact
  private void btnEdit_Click(object sender, EventArgs e)
 {
     if (rowIndex >= 0 && rowIndex <= contacts.Count)
     {
         contact c1 = contacts[rowIndex];
         frmAddContact frmAddContact = new frmAddContact(c1, contacts, "Edit", rowIndex);
         frmAddContact.MdiParent = frmMain.ActiveForm;
         frmAddContact.StartPosition = FormStartPosition.Manual;

         frmAddContact.DataAdded += (data) =>
         {
             LoadData();
             lblStatus.Text = "Cập nhật dữ liệu thành công.";
         };

         frmAddContact.Show();
     }
 }
 
 6.3. Trong form addContact thêm các sự kiện và biến
  public delegate void DataAddedHandler(string data);
 public event DataAddedHandler DataAdded;
 public static contact editContact;
 public static List<contact> contacts;
 public static string btnAddEdit ="";
 public static int rowIndex = 0;
 
  public frmAddContact(contact c1, List<contact> lstcontact, string btnAdd, int row_edit)
 {
     InitializeComponent();
     editContact = c1;
     contacts = lstcontact;
     btnAddEdit = btnAdd;
     rowIndex = row_edit;
 }
 private void loadData()
 {
     txtName.Text = editContact.Name;
     txtPhone.Text = editContact.Phone;
     txtAddress.Text = editContact.Address;
     int gender =Convert.ToInt32(editContact.Gender);
     if(gender==1) rdoNam.Checked = true;
     else if(gender==0) rdoNu.Checked = true;
     dateBithDate.Value =Convert.ToDateTime(editContact.BirthDate);
 }
 
  private void tbnSave_Click(object sender, EventArgs e)
 {
     string filePath = "contact.json";
     string name = txtName.Text.Trim();
     string phone = txtPhone.Text.Trim();
     string address = txtAddress.Text.Trim();
     int gender = 0;
     if (rdoNam.Checked) gender = 1;
     else if (rdoNu.Checked) gender = 0;
     DateTime dateTime = dateBithDate.Value;

     string strBirthDate = dateTime.ToString("MM/dd/yyyy");
     string message = "";
      

     string msg = "";
     if (name == "") msg += "Họ tên không được để trống." + System.Environment.NewLine;
     if (phone == "") msg += "Số điện thoại không được để trống." + System.Environment.NewLine;
     if(address=="")msg+= "Địa chỉ không được để trống" + System.Environment.NewLine;

     if (msg != "")
     {
         MessageBox.Show(msg);
         txtName.Focus();
         if (DataAdded != null) DataAdded.Invoke("Lỗi cập nhật dữ liệu");
         
     }
     else
     {
         contact c1 = new contact(name,phone, address,gender, strBirthDate);
         string jsonString = JsonConvert.SerializeObject(c1);
         message = jsonString;
         if (!File.Exists(filePath))
         {
             message = "Không có file " + filePath;
             if (DataAdded != null) DataAdded.Invoke("1");
             return;
         }

         string str = File.ReadAllText(filePath);
         if(str.Length > 0)
         {
             
             jsonString = "," + jsonString;
         }
         //Cập nhật dữ liệu vào file
         if (btnAddEdit == "Edit")
         {
             if(rowIndex>=0 && rowIndex <= contacts.Count)
             {
                 contact c2 = new contact(name, phone,address, gender, strBirthDate);
                 contacts[rowIndex] = c2;
                 jsonString = JsonConvert.SerializeObject(contacts, Formatting.Indented);
                 jsonString = jsonString.Substring(1, jsonString.Length - 2);                        
                 File.WriteAllText(filePath, jsonString);
                 if (DataAdded != null) DataAdded.Invoke("2");
             }                    
         }
         else
         {
             File.AppendAllText(filePath, jsonString);
             if (DataAdded != null) DataAdded.Invoke(message);
         }
         
     }
     this.Close();
 }
 
   private void frmAddContact_Load(object sender, EventArgs e)
  {
      if(btnAddEdit=="Edit")
          loadData();
  }
 
 
